services:
  web:
    container_name: springboot3demo-web
    build:
      # context: .. 表示docker-compose命令运行时，web服务相对于当前文件的上下文目录（..表示回到根目录）
      context: ..
      # dockerfile相对于context的路径
      dockerfile: ./docker/web/Dockerfile
    ports:
      # 后面的4080是application.yml中配置的
      - "8080:4080"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysqldb:3306/${MYSQL_DATABASE}
      - SPRING_DATASOURCE_USERNAME=${MYSQL_USER}
      - SPRING_DATASOURCE_PASSWORD=${MYSQL_USER_PASSWORD}
    volumes:
      - ./springboot3demo/logs:/logs
    depends_on:
      mysqldb:
        condition: service_healthy
    networks:
      - springboot-mysql-network

  mysqldb:
    container_name: springboot3demo-mysqldb
    build:
      context: ..
      dockerfile: ./docker/mysql/Dockerfile
    command: [
      '--character-set-server=utf8mb4',
      '--collation-server=utf8mb4_unicode_ci'
    ]
    environment:
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_USER_PASSWORD=${MYSQL_USER_PASSWORD}
    ports:
      - "3306:3306"
    volumes:
      # 数据持久化
      - mysql_data:/var/lib/mysql
    networks:
      - springboot-mysql-network
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost"]
      retries: 10
      interval: 3s
      timeout: 30s


networks:
  springboot-mysql-network:
    name: springboot-mysql-network


# 数据卷声明（持久化 MySQL 数据）
volumes:
  mysql_data: